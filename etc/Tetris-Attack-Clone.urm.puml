@startuml
package gameElements.shapeTypes {
  class GhostShape {
    + GhostShape(MasterShape : Shape)
    # calculateMinMaxCoords()
    + goToMaster(masterCenter : Point2D)
    - move(x : double, y : double)
    + rotate(angle : double)
  }
  class IShape {
    - CENTER : Point2D {static}
    - COLOR : Color {static}
    - SHAPE : Point2D[] {static}
    + IShape(renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords()
    + rotate(angle : double)
  }
  class JShape {
    - CENTER : Point2D {static}
    - COLOR : Color {static}
    - SHAPE : Point2D[] {static}
    + JShape(renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords()
    + rotate(angle : double)
  }
  class LShape {
    - CENTER : Point2D {static}
    - COLOR : Color {static}
    - SHAPE : Point2D[] {static}
    + LShape(renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords()
    + rotate(angle : double)
  }
  class OShape {
    - CENTER : Point2D {static}
    - COLOR : Color {static}
    - SHAPE : Point2D[] {static}
    + OShape(renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords()
    + rotate(angle : double)
  }
  class SShape {
    - CENTER : Point2D {static}
    - COLOR : Color {static}
    - SHAPE : Point2D[] {static}
    + SShape(renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords()
    + rotate(angle : double)
  }
  class TShape {
    - CENTER : Point2D {static}
    - COLOR : Color {static}
    - SHAPE : Point2D[] {static}
    - horizontal : boolean
    - rotation : int
    + TShape(renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords()
    + rotate(angle : double)
  }
  class ZShape {
    - CENTER : Point2D {static}
    - COLOR : Color {static}
    - SHAPE : Point2D[] {static}
    + ZShape(renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords()
    + rotate(angle : double)
  }
}
package utils {
  class Constants {
    + Constants()
  }
  class Directions {
    + DOWN : int {static}
    + LEFT : int {static}
    + NONE : int {static}
    + RIGHT : int {static}
    + UP : int {static}
    + Directions()
  }
  class GameConstants {
    + BOARD_HEIGHT : int {static}
    + BOARD_SQUARE : int {static}
    + BOARD_WIDTH : int {static}
    + FPS_SET : int {static}
    + GAME_HEIGHT : int {static}
    + GAME_WIDTH : int {static}
    + UPS_SET : int {static}
    + GameConstants()
  }
  class TetrominoIDs {
    + I : int {static}
    + J : int {static}
    + L : int {static}
    + O : int {static}
    + S : int {static}
    + T : int {static}
    + Z : int {static}
    + TetrominoIDs()
  }
  class WallKickData {
    - ARIKA_I_DL_KICK : int[][] {static}
    - ARIKA_I_DR_KICK : int[][] {static}
    - ARIKA_I_LD_KICK : int[][] {static}
    - ARIKA_I_LU_KICK : int[][] {static}
    - ARIKA_I_RD_KICK : int[][] {static}
    - ARIKA_I_RU_KICK : int[][] {static}
    - ARIKA_I_UL_KICK : int[][] {static}
    - ARIKA_I_UR_KICK : int[][] {static}
    - ARIKA_KICKS : int[][][][] {static}
    - DEFAULT_DL_KICK : int[][] {static}
    - DEFAULT_DR_KICK : int[][] {static}
    - DEFAULT_KICKS : int[][][][] {static}
    - DEFAULT_LD_KICK : int[][] {static}
    - DEFAULT_LU_KICK : int[][] {static}
    - DEFAULT_RD_KICK : int[][] {static}
    - DEFAULT_RU_KICK : int[][] {static}
    - DEFAULT_UL_KICK : int[][] {static}
    - DEFAULT_UR_KICK : int[][] {static}
    + WallKickData()
    - getArikaKickData(rotationState : int, direction : int, kickIndex : int) : Point2D {static}
    - getDefaultKickData(rotationState : int, direction : int, kickIndex : int) : Point2D {static}
    + getKickData(shapeIndex : int, rotationState : int, direction : int, kickIndex : int) : Point2D {static}
  }
}
package inputs {
  class KeyboardInputs {
    - gamePanel : GamePanel
    + KeyboardInputs(gamePanel : GamePanel)
    + keyPressed(e : KeyEvent)
    + keyReleased(e : KeyEvent)
    + keyTyped(e : KeyEvent)
  }
}
package gameStates {
  class GameOver {
    + GameOver(game : Game)
    + keyPressed(e : KeyEvent)
    + keyReleased(e : KeyEvent)
    + mouseClicked(e : MouseEvent)
    + mouseDragged(e : MouseEvent)
    + mouseMoved(e : MouseEvent)
    + mousePressed(e : MouseEvent)
    + mouseReleased(e : MouseEvent)
    + render(g : Graphics)
    + update()
    + windowLostFocus()
  }
  enum GameState {
    + GAME_OVER {static}
    + PLAYING {static}
    + PLAYING_MP {static}
    + TITLE_SCREEN {static}
    + state : GameState {static}
    + valueOf(name : String) : GameState {static}
    + values() : GameState[] {static}
  }
  class Lobby {
    + Lobby()
    + keyPressed(e : KeyEvent)
    + keyReleased(e : KeyEvent)
    + mouseClicked(e : MouseEvent)
    + mouseDragged(e : MouseEvent)
    + mouseMoved(e : MouseEvent)
    + mousePressed(e : MouseEvent)
    + mouseReleased(e : MouseEvent)
    + render(g : Graphics)
    + update()
    + windowLostFocus()
  }
  class Playing {
    - X_OFFSET : int
    - Y_OFFSET : int
    - board : Board
    - boardColor : Color
    - mouseButton1Pressed : boolean
    - mouseButton3Pressed : boolean
    + Playing(game : Game)
    + keyPressed(e : KeyEvent)
    + keyReleased(e : KeyEvent)
    + mouseClicked(e : MouseEvent)
    + mouseDragged(e : MouseEvent)
    + mouseMoved(e : MouseEvent)
    + mousePressed(e : MouseEvent)
    + mouseReleased(e : MouseEvent)
    + render(g : Graphics)
    + update()
    + windowLostFocus()
  }
  class PlayingMP {
    - NETWORK_TICK_MAX : int
    - OPPONENT_X_OFFSET : int
    - PLAYER_X_OFFSET : int
    - Y_OFFSET : int
    ~ boardColor : Color
    - matchOver : boolean
    - networkTick : int
    ~ opponentBoard : BoardMP
    - opponentDisconnected : boolean
    ~ playerBoard : Board
    - shapeMP : ShapeMP
    + PlayingMP(game : Game)
    + addBoardMP(username : String, address : InetAddress, port : int)
    + getOpponentBoard() : BoardMP
    + getShapeMP() : ShapeMP
    + keyPressed(e : KeyEvent)
    + keyReleased(e : KeyEvent)
    + mouseClicked(e : MouseEvent)
    + mouseDragged(e : MouseEvent)
    + mouseMoved(e : MouseEvent)
    + mousePressed(e : MouseEvent)
    + mouseReleased(e : MouseEvent)
    + removeBoardMP(username : String)
    + render(g : Graphics)
    + sendPlayerState()
    + update()
    + windowLostFocus()
  }
  class State {
    # game : Game
    + State(game : Game)
    + getGame() : Game
  }
  interface StateMethods {
    + keyPressed(KeyEvent) {abstract}
    + keyReleased(KeyEvent) {abstract}
    + mouseClicked(MouseEvent) {abstract}
    + mouseDragged(MouseEvent) {abstract}
    + mouseMoved(MouseEvent) {abstract}
    + mousePressed(MouseEvent) {abstract}
    + mouseReleased(MouseEvent) {abstract}
    + render(Graphics) {abstract}
    + update() {abstract}
    + windowLostFocus() {abstract}
  }
  class TitleScreen {
    - titleScreen : BufferedImage
    + TitleScreen(game : Game)
    - importImage()
    + keyPressed(e : KeyEvent)
    + keyReleased(e : KeyEvent)
    + mouseClicked(e : MouseEvent)
    + mouseDragged(e : MouseEvent)
    + mouseMoved(e : MouseEvent)
    + mousePressed(e : MouseEvent)
    + mouseReleased(e : MouseEvent)
    + render(g : Graphics)
    + update()
    + windowLostFocus()
  }
}
package gameElements {
  class Board {
    - backgroundColor : Color
    - board : Color[][]
    - debugMode : boolean
    - gridColor : Color
    - paused : boolean
    - renderOrigin : Point2D
    - renderSize : int
    - tetro1 : Tetromino
    - tetro2 : Tetromino
    + Board(size : int, xOffset : int, yOffset : int, color : Color)
    + addBlockOnMousePosition(x : int, y : int)
    - addTetrominoToPile()
    - checkRows()
    - clearRow(row : int)
    + getBackgroundColor() : Color
    + getBoard() : Color[][]
    + getTetromino() : Tetromino
    + removeBlockOnMousePosition(x : int, y : int)
    + render(g : Graphics)
    + reset()
    + setTetromino(tetroID : int)
    - shiftRowsDown(row : int)
    - toggleBlockOnMousePosition(x : int, y : int, add : boolean)
    + toggleDebugMode()
    + togglePause()
    + update()
  }
  class BoardMP {
    - backgroundColor : Color
    + board : Color[][]
    - gridColor : Color
    - renderOrigin : Point2D
    - renderSize : int
    - username : String
    + BoardMP(size : int, xOffset : int, yOffset : int, color : Color, username : String)
    + getUsername() : String
    + render(g : Graphics)
    + update(row : int, col : int, color : Color)
  }
  abstract class Shape {
    # center : Point2D
    # color : Color
    # maxX : int
    # maxY : int
    # minX : int
    # minY : int
    # points : Point2D[]
    - renderOffset : Point2D
    - renderSize : int
    + Shape(center : Point2D, points : Point2D[], color : Color, renderSize : int, renderOrigin : Point2D)
    # calculateMinMaxCoords() {abstract}
    + getCenter() : Point2D
    + getColor() : Color
    + getMaxX() : int
    + getMaxY() : int
    + getMinX() : int
    + getMinY() : int
    + getPoints() : Point2D[]
    + getRenderOffset() : Point2D
    + getRenderSize() : int
    + move(x : int, y : int)
    + render(g : Graphics)
    + rotate(double) {abstract}
    # rotatePoints(angle : double)
  }
  class ShapeMP {
    - color : Color
    - points : Point2D[]
    - renderOffset : Point2D
    - renderSize : int
    + ShapeMP(renderSize : int, xOffset : int, yOffset : int)
    + getPoints() : Point2D[]
    + render(g : Graphics)
    + update(points : Point2D[], color : Color)
  }
  class Tetromino {
    - HORIZONTAL_SPEED : int
    - VERTICAL_FAST : int
    - VERTICAL_INSTANT : int
    - VERTICAL_SLOW : int
    - active : boolean
    - board : Board
    - down : boolean
    - drop : boolean
    - ghost : GhostShape
    - horizontalMoveTick : int
    - left : boolean
    - rand : Random
    - right : boolean
    - rotationStatus : int
    - shape : Shape
    - shapeID : int
    - updateGhost : boolean
    - verticalMoveTick : int
    - verticalSpeed : int
    + Tetromino(renderSize : int, renderOrigin : Point2D, board : Board)
    + Tetromino(renderSize : int, renderOrigin : Point2D, board : Board, shapeID : int)
    - bottomColides(shape : Shape) : boolean
    + dropGhost()
    + getShape() : Shape
    + isActive() : boolean
    + move(direction : int)
    + render(g : Graphics)
    + rotate(direction : int)
    - rotationColides() : boolean
    + setActive(active : boolean)
    + setDown(down : boolean)
    + setDrop(drop : boolean)
    + setLeft(left : boolean)
    + setRight(right : boolean)
    - shapeFactory(renderSize : int, spawnPoint : Point2D, shapeID : int) : Shape
    - sideColides(dir : int) : boolean
    + update()
  }
}
package main {
  class Game {
    - client : GameClient
    - clientActive : boolean
    - exit : boolean
    - gameOver : GameOver
    - gamePanel : GamePanel
    - gameThread : Thread
    - gameWindow : GameWindow
    - menu : TitleScreen
    - playing : Playing
    - playingMP : PlayingMP
    - server : GameServer
    - serverActive : boolean
    + Game()
    + addPlayer(username : String, address : InetAddress, port : int)
    + exit()
    + getClient() : GameClient
    + getGameOver() : GameOver
    + getMenu() : TitleScreen
    + getPlaying() : Playing
    + getPlayingMP() : PlayingMP
    + getServer() : GameServer
    - initClasses()
    + initNetworking()
    + isClientActive() : boolean
    + isServerActive() : boolean
    + removePlayer(username : String)
    + render(g : Graphics)
    + run()
    + sendBoardUpdate(row : int, col : int, color : Color)
    + sendShapeUpdate(points : Point2D[], color : Color)
    + setClientActive(clientActive : boolean)
    + setServerActive(serverActive : boolean)
    - startGameLoop()
    + terminateConnection()
    + update()
    + windowLostFocus()
  }
  class MainClass {
    + MainClass()
    + main(args : String[]) {static}
  }
}
package networking.packets {
  abstract class Packet {
    + packetId : byte
    + Packet(packetId : int)
    + getData() : byte[] {abstract}
    + lookupPacket(id : int) : PacketTypes {static}
    + lookupPacket(packetId : String) : PacketTypes {static}
    + readData(data : byte[]) : String
    + writeData(GameClient) {abstract}
    + writeData(GameServer) {abstract}
  }
  enum PacketTypes {
    + BOARD {static}
    + DISCONNECT {static}
    + INVALID {static}
    + LOGIN {static}
    + SERVER_FULL {static}
    + SHAPE {static}
    - packetId : int
    + getId() : int
    + valueOf(name : String) : PacketTypes {static}
    + values() : PacketTypes[] {static}
  }
  class Packet00Login {
    - username : String
    + Packet00Login(data : byte[])
    + Packet00Login(username : String)
    + getData() : byte[]
    + getUsername() : String
    + writeData(client : GameClient)
    + writeData(server : GameServer)
  }
  class Packet01Disconnect {
    - username : String
    + Packet01Disconnect(data : byte[])
    + Packet01Disconnect(username : String)
    + getData() : byte[]
    + getUsername() : String
    + writeData(client : GameClient)
    + writeData(server : GameServer)
  }
  class Packet03Board {
    - color : Color
    - data : String[]
    - username : String
    - x : int
    - y : int
    + Packet03Board(data : byte[])
    + Packet03Board(username : String, x : int, y : int, color : Color)
    + getColor() : Color
    + getData() : byte[]
    + getUsername() : String
    + getX() : int
    + getY() : int
    + writeData(client : GameClient)
    + writeData(server : GameServer)
  }
  class Packet04Shape {
    - POINTS_LEN : int
    ~ color : Color
    - data : String[]
    ~ points : Point2D[]
    - username : String
    + Packet04Shape(data : byte[])
    + Packet04Shape(username : String, points : Point2D[], color : Color)
    + getColor() : Color
    + getData() : byte[]
    + getPoints() : Point2D[]
    + getUsername() : String
    + writeData(client : GameClient)
    + writeData(server : GameServer)
  }
}
Game -->  "-gameOver" GameOver
Tetromino -->  "-ghost" GhostShape
Game -->  "-menu" TitleScreen
Tetromino -->  "-shape" Shape
GameState -->  "-state" GameState
Game -->  "-playingMP" PlayingMP
PlayingMP -->  "-shapeMP" ShapeMP
PlayingMP -->  "-playerBoard" Board
Game -->  "-playing" Playing
PlayingMP -->  "-opponentBoard" BoardMP
Playing -->  "-board" Board
State -->  "-game" Game
Board -->  "-tetro1" Tetromino
GhostShape --|> Shape 
IShape --|> Shape 
JShape --|> Shape 
LShape --|> Shape 
OShape --|> Shape 
SShape --|> Shape 
TShape --|> Shape 
ZShape --|> Shape 
GameOver ..|> StateMethods 
GameOver --|> State 
Lobby ..|> StateMethods 
Playing ..|> StateMethods 
Playing --|> State 
PlayingMP ..|> StateMethods 
PlayingMP --|> State 
TitleScreen ..|> StateMethods 
TitleScreen --|> State 
Packet00Login --|> Packet 
Packet01Disconnect --|> Packet 
Packet03Board --|> Packet 
Packet04Shape --|> Packet 
@enduml